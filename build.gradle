// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ext {
        JAVA_VERSION = JavaVersion.VERSION_11
        KOTLIN_VERSION = "1.6.21"
        KOTLIN_COMPATIBILITY_VALIDATOR_VERSION = "0.7.1"
        ANDROID_GRADLE_PLUGIN_VERSION = "7.1.3"
        JACOCO_VERSION = "0.8.7"
        JUNIT_5_VERSION = "5.8.1"
        JUNIT_5_PLUGIN_VERSION = "1.8.0.0"
        JUNIT_KTX_VERSION = "1.1.3"
        ESPRESSO_VERSION = "3.4.0"
        MOCKITO_VERSION = "3.12.4"
    }

    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath "com.android.tools.build:gradle:$ANDROID_GRADLE_PLUGIN_VERSION"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$KOTLIN_VERSION"
        classpath "de.mannodermaus.gradle.plugins:android-junit5:$JUNIT_5_PLUGIN_VERSION"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

plugins {
    id "org.jetbrains.kotlinx.binary-compatibility-validator" version "$KOTLIN_COMPATIBILITY_VALIDATOR_VERSION"
    id "jacoco"
}

jacoco {
    toolVersion = JACOCO_VERSION
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }

    gradle.projectsEvaluated {
        tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) { task ->
            if (!task.name.toLowerCase().contains("debug")) {
                kotlinOptions {
                    allWarningsAsErrors = true
                }
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

// Task name is used as report file name and that must correspond to a pattern recognized by codecov-bash:
// https://github.com/codecov/codecov-bash/blob/master/codecov
task jacocoMergedReportDebug(type: JacocoReport) {
    group = "reporting"
    description = "Collect Jacoco coverage data of dabirva and example module into a single report"

    reports {
        html.required = false
        xml.required = true
        csv.required = false
    }

    sourceDirectories.setFrom fileTree(dir: projectDir, includes: [
            "dabirva/src/main/java/**/*",
    ])
    classDirectories.setFrom fileTree(dir: projectDir, includes: [
            "dabirva/build/tmp/kotlin-classes/debug/**/*",
    ])
    executionData.setFrom fileTree(dir: projectDir, includes: [
            // Unit tests coverage
            "dabirva/build/outputs/**/*.exec",
            "example/build/outputs/**/*.exec",
            // Instrumented tests coverage
            "dabirva/build/outputs/**/*.ec",
            "example/build/outputs/**/*.ec",
    ])
}
